What is the difference between var, let, and const in JavaScript?
var is function-scoped, while let and const are block-scoped. const is used for variables that shouldnâ€™t be reassigned, while let allows reassignment.


Explain closures in JavaScript and how they work.
A closure is a function that retains access to its lexical environment, even when the function is executed outside its original scope. It allows variables in an outer function to be remembered by an inner function.


How does the event loop work in JavaScript?
The event loop allows JavaScript to perform non-blocking I/O by queuing asynchronous operations like I/O or timers and processing them when the call stack is clear.


What is the difference between synchronous and asynchronous JavaScript?
Synchronous JavaScript runs line by line, blocking further execution until the current line finishes. Asynchronous JavaScript allows code to run without waiting for previous operations to complete (using callbacks, promises, or async/await).


What are JavaScript promises and how do you use them?
A promise represents the eventual result of an asynchronous operation. It can be in one of three states: pending, fulfilled, or rejected. Example:

let promise = new Promise((resolve, reject) => {
    resolve("Success");
});
promise.then(result => console.log(result));


What is the difference between == and === in JavaScript?
== performs type coercion before comparing, while === (strict equality) compares both type and value without coercion.


Explain the concept of hoisting in JavaScript.
Hoisting refers to the behavior where variable and function declarations are moved to the top of their scope before execution. This allows functions to be called before they are defined.


How do arrow functions differ from regular functions in JavaScript?
Arrow functions have a shorter syntax and do not have their own this, arguments, or super context, which makes them unsuitable for certain object-oriented operations.

What is the purpose of the this keyword in JavaScript?
The this keyword refers to the object that is currently calling the function. Its value depends on how a function is called.


What are higher-order functions in JavaScript? Provide an example.
Higher-order functions are functions that take other functions as arguments or return them. Example:
function higherOrderFunction(callback) {
    return callback();
}